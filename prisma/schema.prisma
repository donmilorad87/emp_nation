// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique 
  email               String    @unique
  password            String
  salt                String
  usedPasswords       String[]
  activated           Boolean   @default(false)
  emailUpdated        String?
  emailList           String[]
  usernameList        String[]
  role                Int       @default(0)
  twofactorauth       Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  rooms               Room[]
  token               Token[]
}

model Token {
  id                  String    @id @default(uuid())
  token               String    @unique
  code                String    @unique
  user_id             String    @default(uuid())
  user                User      @relation(fields: [user_id], references: [id]) // Relation to store id
  createdAt           DateTime  @default(now())
}

model Room {
  id                  String    @id @default(uuid())
  room_id             String
  room_url            String?  
  room_name           String    @unique
  provider_name       String    @default("")
  regular_provider    Boolean   @default(false)
  aichat              Boolean   @default(false)
  transcript          Boolean   @default(false)
  logo                String    @default("en")
  top_header          Boolean   @default(false)
  auto_join           Boolean   @default(false)
  token               String
  room_url_client     String?
  user_id             String
  session_active_from String?
  user                User      @relation(fields: [user_id], references: [id]) // Relation to store id
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  presistedMessages   PresistedMessages[]
}

model PresistedMessages{
  id                  String    @id @default(uuid())
  room_name           String
  session_id          String
  participant_id      String
  room_id             String
  timestamp           String
  duration_in_sec     String
  user_name           String
  callclient_id       String
  message             String?
  room_id_foreign_key String
  room                Room      @relation(fields: [room_id_foreign_key], references: [id])
  createdAt           DateTime  @default(now())
}

model threadsMessages{
  id                  String    @id @default(uuid())
  room_name           String
  threadIdentifier    String
  message             String?
  createdAt           DateTime  @default(now())
}
